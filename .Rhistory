if isinstance(value, datetime.date):
record[key] = datetime.combine(value, datetime.min.time())
return record
# Function to migrate data from MySQL to MongoDB
def migrate_table(table_name):
cursor = mysql_conn.cursor(dictionary=True)
cursor.execute(f"SELECT * FROM {table_name}")
rows = cursor.fetchall()
if rows:
rows = [convert_dates(row) for row in rows]  # Convert dates to datetime
mongo_db[table_name].insert_many(rows)
cursor.close()
# List of tables to migrate
tables = ['airports', 'aircrafts', 'airlines', 'wildlife', 'flights', 'conditions', 'strikes']
# Migrate each table
for table in tables:
migrate_table(table)
# Close connections
mysql_conn.close()
mongo_client.close()
import mysql.connector
from pymongo import MongoClient
from datetime import datetime, date
# MySQL connection
mysql_conn = mysql.connector.connect(
host="db4free.net",
user="dhivya",
password="Practicum@2024",
database="practicum12024"
)
# MongoDB connection
mongo_client = MongoClient('mongodb://localhost:27017/')
mongo_db = mongo_client['practicum12024']
# Function to convert dates to datetime objects
def convert_dates(record):
for key, value in record.items():
if isinstance(value, date):
record[key] = datetime.combine(value, datetime.min.time())
return record
# Function to migrate data from MySQL to MongoDB
def migrate_table(table_name):
cursor = mysql_conn.cursor(dictionary=True)
cursor.execute(f"SELECT * FROM {table_name}")
rows = cursor.fetchall()
if rows:
rows = [convert_dates(row) for row in rows]  # Convert dates to datetime
mongo_db[table_name].insert_many(rows)
cursor.close()
# List of tables to migrate
tables = ['airports', 'aircrafts', 'airlines', 'wildlife', 'flights', 'conditions', 'strikes']
# Migrate each table
for table in tables:
migrate_table(table)
# Close connections
mysql_conn.close()
mongo_client.close()
# 1. Library
library(RMySQL)
library(DBI)
# 2. Settings
db_user <- 'dhivya'            #  value from the setup
db_password <- 'Practicum@2024'    #  value from the setup
db_name <- 'practicum12024'         #  value from the setup
db_host <- 'db4free.net'       # for db4free.net
db_port <- 3306
# 3. Connect to remote server database
conn <-  dbConnect(RMySQL::MySQL(), user = db_user, password = db_password,
dbname = db_name, host = db_host, port = db_port)
# Function to delete all tables
delete_tables <- function() {
# Delete strikes table
dbExecute(conn, "DROP TABLE IF EXISTS strikes")
# Delete flights table
dbExecute(conn, "DROP TABLE IF EXISTS flights")
# Delete conditions lookup table
dbExecute(conn, "DROP TABLE IF EXISTS conditions")
# Delete aircrafts table
dbExecute(conn, "DROP TABLE IF EXISTS aircrafts")
# Delete airports table
dbExecute(conn, "DROP TABLE IF EXISTS airlines")
# Delete wildlife table
dbExecute(conn, "DROP TABLE IF EXISTS wildlife")
# Delete airports table
dbExecute(conn, "DROP TABLE IF EXISTS airports")
# Delete audit_log table
dbExecute(conn, "DROP TABLE IF EXISTS audit_log")
}
# Call the function to delete all tables
delete_tables()
# Create the airports table
dbExecute(conn, "CREATE TABLE airports (
aid INT PRIMARY KEY AUTO_INCREMENT,
airportName TEXT,
airportState TEXT,
airportCode VARCHAR(3) DEFAULT 'ZZZ'
)")
# Create the aircrafts table
dbExecute(conn, "CREATE TABLE aircrafts (
airid INT PRIMARY KEY AUTO_INCREMENT,
model TEXT
)")
# Create the airlines table
dbExecute(conn, "CREATE TABLE airlines (
ailid INT PRIMARY KEY AUTO_INCREMENT,
name TEXT,
code TEXT
)")
# Create the wildlife table
dbExecute(conn, "CREATE TABLE wildlife (
wid INT PRIMARY KEY AUTO_INCREMENT,
size TEXT,
numbirds INT
)")
# Create the flights table
dbExecute(conn, "CREATE TABLE flights (
fid INT PRIMARY KEY AUTO_INCREMENT,
date DATE,
originAirport INT,
isHeavy BOOLEAN,
aircraftType TEXT,
airid INT,
ailid INT,
FOREIGN KEY (originAirport) REFERENCES airports(aid),
FOREIGN KEY (airid) REFERENCES aircrafts(airid),
FOREIGN KEY (ailid) REFERENCES airlines(ailid)
)")
# Create the conditions lookup table
dbExecute(conn, "CREATE TABLE conditions (
cid INT PRIMARY KEY AUTO_INCREMENT,
sky_condition TEXT,
explanation TEXT
)")
# Create the strikes table
dbExecute(conn, "CREATE TABLE strikes (
sid INT PRIMARY KEY AUTO_INCREMENT,
fid INT,
pilotWarned Boolean,
impact TEXT,
damage BOOLEAN,
altitude INT CHECK (altitude >= 0),
conditions INT,
wid INT,
FOREIGN KEY (fid) REFERENCES flights(fid),
FOREIGN KEY (conditions) REFERENCES conditions(cid),
FOREIGN KEY (wid) REFERENCES wildlife(wid)
)")
# Load the bird strikes CSV data into a dataframe called bds.raw
bds.raw <- read.csv("BirdStrikesData-V3.csv")
####################################
insert_airports <- function(connection, data) {
# Start transaction
dbBegin(connection)
# Batch size for insertion
batch_size <- 260000
n <- nrow(data)
num_batches <- ceiling(n / batch_size)
for (batch_index in 1:num_batches) {
start <- (batch_index - 1) * batch_size + 1
end <- min(batch_index * batch_size, n)
batch_data <- data[start:end, ]
# Escape single quotes in airport name
batch_data$airport <- gsub("'", "''", batch_data$airport)
# Construct SQL insert statement
insert_statement <- paste0("INSERT INTO airports (airportName, airportState, airportCode) VALUES ",
paste0("('", batch_data$airport, "', '", batch_data$origin, "', 'ZZZ')", collapse = ", "))
# Execute batch insert statement
dbExecute(connection, insert_statement)
}
# Commit transaction
dbCommit(connection)
}
# Usage:
insert_airports(conn, unique(bds.raw[c("airport", "origin")]))
#########################################
###################################################
insert_aircrafts <- function(connection, data) {
# Start transaction
dbBegin(connection)
# Batch size for insertion
batch_size <- 260000
n <- nrow(data)
num_batches <- ceiling(n / batch_size)
for (batch_index in 1:num_batches) {
start <- (batch_index - 1) * batch_size + 1
end <- min(batch_index * batch_size, n)
batch_data <- data[start:end, , drop = FALSE] # Ensure batch_data is a data frame
# Escape single quotes in model
batch_data$model <- gsub("'", "''", batch_data$model)
# Construct SQL insert statement
insert_statement <- paste0("INSERT INTO aircrafts (model) VALUES ",
paste0("('", batch_data$model, "')", collapse = ", "))
# Execute batch insert statement
dbExecute(connection, insert_statement)
}
# Commit transaction
dbCommit(connection)
}
##################################################
# Usage:
aircraft_data <- unique(data.frame(model = bds.raw$`model`))
insert_aircrafts(conn, aircraft_data)
#####################################################
####################################################
insert_airlines <- function(connection, data) {
# Start transaction
dbBegin(connection)
# Batch size for insertion
batch_size <- 260000
n <- nrow(data)
num_batches <- ceiling(n / batch_size)
for (batch_index in 1:num_batches) {
start <- (batch_index - 1) * batch_size + 1
end <- min(batch_index * batch_size, n)
batch_data <- data[start:end, , drop = FALSE] # Ensure batch_data is a data frame
# Escape single quotes in name
batch_data$name <- gsub("'", "''", batch_data$name)
# Construct SQL insert statement
insert_statement <- paste0("INSERT INTO airlines (name, code) VALUES ",
paste0("('", batch_data$name, "', '", batch_data$code, "')", collapse = ", "))
# Execute batch insert statement
dbExecute(connection, insert_statement)
}
# Commit transaction
dbCommit(connection)
}
########################################
# Usage:
airline_data <- unique(data.frame(name = bds.raw$`airline`, code = substr(bds.raw$`airline`, 1, 3)))
insert_airlines(conn, airline_data)
########################################
################################################
insert_wildlife <- function(connection, data) {
# Get distinct data
unique_data <- unique(data)
# Start transaction
dbBegin(connection)
# Batch size for insertion
batch_size <- 260000
n <- nrow(unique_data)
num_batches <- ceiling(n / batch_size)
for (batch_index in 1:num_batches) {
start <- (batch_index - 1) * batch_size + 1
end <- min(batch_index * batch_size, n)
batch_data <- unique_data[start:end, , drop = FALSE] # Ensure batch_data is a data frame
# Escape single quotes in size
batch_data$size <- gsub("'", "''", batch_data$size)
# Construct SQL insert statement
insert_statement <- paste0("INSERT INTO wildlife (size, numbirds) VALUES ",
paste0("('", batch_data$size, "', NULL)", collapse = ", "))
# Execute batch insert statement
dbExecute(connection, insert_statement)
}
# Commit transaction
dbCommit(connection)
}
##############################################
# Usage:
wildlife_data <- unique(data.frame(size = bds.raw$wildlife_size, numbirds = NA))
insert_wildlife(conn, wildlife_data)
##############################################
#########################################
insert_conditions <- function(connection, data) {
distinct_conditions <- unique(data)
# Start transaction
dbBegin(connection)
# Batch size for insertion
batch_size <- 26000
# Iterate over distinct conditions in batches
for (start_index in seq(1, length(distinct_conditions), batch_size)) {
end_index <- min(start_index + batch_size - 1, length(distinct_conditions))
batch_conditions <- distinct_conditions[start_index:end_index]
# Escape single quotes in conditions
batch_conditions <- gsub("'", "''", batch_conditions)
# Construct batch insert statement
insert_values <- paste0("('", batch_conditions, "', '')")
insert_statement <- paste0("INSERT INTO conditions (sky_condition, explanation) VALUES ", paste(insert_values, collapse = ", "))
# Execute batch insert statement
dbExecute(connection, insert_statement)
}
# Commit transaction
dbCommit(connection)
}
# Usage:
insert_conditions(conn, bds.raw$sky_conditions)
#####################################
####################################
insert_flight_data <- function(connection, data, airports_table, aircrafts_table, airlines_table) {
# Start transaction
dbBegin(connection)
# Extract necessary columns from the dataframe
flight_data <- data[, c("flight_date", "airport", "airline","aircraft", "heavy_flag", "model")]
# Extract characters before the first space in flight_date and assign to date column
flight_data$date <- sub("\\s.*", "", as.character(flight_data$flight_date))
# Map airport names to airport ids
airport_ids <- dbGetQuery(connection, paste0("SELECT aid, airportName FROM ", airports_table))
flight_data$originAirport <- airport_ids[match(flight_data$airport, airport_ids$airportName), "aid"]
# Map aircraft types to aircraft ids
aircraft_ids <- dbGetQuery(connection, paste0("SELECT airid, model FROM ", aircrafts_table))
flight_data$airid <- aircraft_ids[match(flight_data$model, aircraft_ids$model), "airid"]
# Map airline names to airline ids
airline_ids <- dbGetQuery(connection, paste0("SELECT ailid, name FROM ", airlines_table))
flight_data$ailid <- airline_ids[match(flight_data$airline, airline_ids$name), "ailid"]
# Map heavy_flag to boolean values
flight_data$isHeavy <- flight_data$heavy_flag == "Yes"
# Extract aircraftType from the aircraft column
flight_data$aircraftType <- flight_data$aircraft
# Extract necessary columns for the insertion
flight_data <- flight_data[, c("date", "originAirport", "isHeavy", "airid", "ailid", "aircraftType")]
# Replace "/" with "-"
flight_data$date <- gsub("/", "-", flight_data$date)
# Split the date strings by "-"
date_parts <- strsplit(flight_data$date, "-")
# Rearrange date parts (exchange year and month) with correct format
modified_dates <- sapply(date_parts, function(x) {
modified_date <- paste0(x[3], "-", sprintf("%02d", as.integer(x[2])), "-", sprintf("%02d", as.integer(x[1])))
return(modified_date)
})
# Assign modified dates back to the date column
flight_data$date <- modified_dates
# Split the date strings by "-"
date_parts <- strsplit(flight_data$date, "-")
# Rearrange date parts (exchange day and month) with correct format
modified_dates <- sapply(date_parts, function(x) {
modified_date <- paste0(x[1], "-", x[3], "-", x[2])
return(modified_date)
})
# Assign modified dates back to the date column
flight_data$date <- modified_dates
# Replace "NA-NA-NA" entries with NA
flight_data$date <- ifelse(flight_data$date == "NA-NA-NA", NA, flight_data$date)
# Batch size for insertion
batch_size <- 26000
# Batch insert data into flights table
for (i in seq(1, nrow(flight_data), batch_size)) {
batch_data <- flight_data[i:min(i + batch_size - 1, nrow(flight_data)), ]
# Escape single quotes in aircraftType
batch_data$aircraftType <- gsub("'", "''", batch_data$aircraftType)
batch_data$aircraftType <- as.character(batch_data$aircraftType)
# Generate batch insert statement
insert_values <- apply(batch_data, 1, function(row) {
date_value <- ifelse(is.na(row["date"]), "NULL", paste("'", as.character(row["date"]), "'", sep = ""))
origin_airport_value <- ifelse(is.na(row["originAirport"]), "NULL", row["originAirport"])
is_heavy_value <- ifelse(is.na(row["isHeavy"]), "NULL", row["isHeavy"])
airid_value <- ifelse(is.na(row["airid"]), "NULL", row["airid"])
ailid_value <- ifelse(is.na(row["ailid"]), "NULL", row["ailid"])
aircraft_type_value <- ifelse(is.na(row["aircraftType"]), "NULL", paste("'", as.character(row["aircraftType"]), "'", sep = ""))
return(paste(date_value, origin_airport_value, is_heavy_value, airid_value, ailid_value, aircraft_type_value, sep = ", "))
})
insert_statement <- paste0("INSERT INTO flights (date, originAirport, isHeavy, airid, ailid, aircraftType) VALUES (",
paste(insert_values, collapse = "), ("), ")")
dbExecute(conn, insert_statement)
}
# Commit transaction
dbCommit(connection)
}
# Usage:
insert_flight_data(conn, bds.raw, "airports", "aircrafts", "airlines")
########################################
########################################
insert_strike_data <- function(connection, data, conditions_table, flights_table, wildlife_table, airlines_table) {
# Start transaction
dbBegin(connection)
# Extract necessary columns from the dataframe
strike_data <- data[, c("flight_date", "airline", "impact", "damage", "altitude_ft", "sky_conditions", "wildlife_size", "pilot_warned_flag")]
# Map damage to boolean values
strike_data$damage <- strike_data$damage == "Damage"
# Extract characters before the first space in flight_date and assign to date column
strike_data$date <- sub("\\s.*", "", as.character(strike_data$flight_date))
# Extract airlineName from the airline column
strike_data$airlineName <- strike_data$airline
# Add spaces to the front and end of the airlineName column
strike_data$airlineName <- paste0(" ", strike_data$airlineName, " ")
# Map airline names to airline ids
airline_ids <- dbGetQuery(connection, paste0("SELECT ailid, name FROM ", airlines_table))
strike_data$ailid <- airline_ids[match(strike_data$airlineName, airline_ids$name), "ailid"]
# Drop unnecessary columns
strike_data <- strike_data[, c("date", "ailid", "impact", "damage", "altitude_ft", "sky_conditions", "wildlife_size", "pilot_warned_flag")]
# Replace "/" with "-"
strike_data$date <- gsub("/", "-", strike_data$date)
# Split the date strings by "-"
date_parts <- strsplit(strike_data$date, "-")
# Rearrange date parts (exchange year and month) with correct format
modified_dates <- sapply(date_parts, function(x) {
modified_date <- paste0(x[3], "-", sprintf("%02d", as.integer(x[2])), "-", sprintf("%02d", as.integer(x[1])))
return(modified_date)
})
# Assign modified dates back to the date column
strike_data$date <- modified_dates
# Split the date strings by "-"
date_parts <- strsplit(strike_data$date, "-")
# Rearrange date parts (exchange day and month) with correct format
modified_dates <- sapply(date_parts, function(x) {
modified_date <- paste0(x[1], "-", x[3], "-", x[2])
return(modified_date)
})
# Assign modified dates back to the date column
strike_data$date <- modified_dates
# Replace "NA-NA-NA" entries with NA
strike_data$date <- ifelse(strike_data$date == "NA-NA-NA", NA, strike_data$date)
# Query condition ids from the conditions table
condition_ids <- dbGetQuery(connection, paste0("SELECT cid, sky_condition FROM ", conditions_table))
# Map sky_conditions to condition ids
strike_data$conditions <- condition_ids[match(strike_data$sky_conditions, condition_ids$sky_condition), "cid"]
# Define batch size
batch_size <- 26000
# Execute SQL query to fetch fid, ailid, and Date from flights table
fid <- dbGetQuery(connection, paste0("SELECT fid, ailid, Date FROM ", flights_table))
# Use match to find fid values based on matching airlineName and Date
matched_indices <- match(paste(strike_data$airlineName, strike_data$date),
paste(fid$airlineName, fid$Date))
# Add fid values to strike_data dataframe based on matched indices
strike_data$fid <- fid$fid[matched_indices]
# Convert fid to integer
strike_data$fid <- as.integer(strike_data$fid)
# Remove commas and convert altitude_ft to integer
strike_data$altitude <- as.integer(gsub(",", "", strike_data$altitude_ft))
strike_data <- strike_data[, c("fid", "impact", "damage", "altitude", "conditions", "wildlife_size", "pilot_warned_flag")]
# Map pilot_warned to boolean values
strike_data$pilotWarned <- strike_data$pilot_warned_flag == "Y"
# Map wildlife size to wildlife ids
wildlife_ids <- dbGetQuery(connection, paste0("SELECT wid, size FROM ", wildlife_table))
strike_data$wid <- wildlife_ids[match(strike_data$wildlife_size, wildlife_ids$size), "wid"]
strike_data <- strike_data[, c("fid", "impact", "damage", "altitude", "conditions", "wid", "pilotWarned")]
# Batch size for insertion
batch_size <- 26000
# Batch insert data into strikes table
for (i in seq(1, nrow(strike_data), batch_size)) {
batch_data <- strike_data[i:min(i + batch_size - 1, nrow(strike_data)), ]
# Generate batch insert statement
insert_values <- apply(batch_data, 1, function(row) {
fid <- ifelse(is.na(row["fid"]), "NULL", paste("'", row["fid"], "'", sep = ""))
impact <- ifelse(is.na(row["impact"]), "NULL", paste("'", gsub("'", "''", as.character(row["impact"])), "'", sep = ""))
damage <- ifelse(is.na(row["damage"]), "NULL", as.character(row["damage"]))
altitude <- ifelse(is.na(row["altitude"]), "NULL", as.character(row["altitude"]))
conditions <- ifelse(is.na(row["conditions"]), "NULL", paste("'", row["conditions"], "'", sep = ""))
wid <- ifelse(is.na(row["wid"]), "NULL", paste("'", row["wid"], "'", sep = ""))
pilot_warned <- ifelse(is.na(row["pilotWarned"]), "NULL", as.character(row["pilotWarned"]))
return(paste(fid, ", ", impact, ", ", damage, ", ", altitude, ", ", conditions, ", ", wid, ", ", pilot_warned))
})
insert_statement <- paste0("INSERT INTO strikes (fid, impact, damage, altitude, conditions, wid, pilotWarned) VALUES (",
paste(insert_values, collapse = "), ("), ")")
dbExecute(conn, insert_statement)
}
# Commit transaction
dbCommit(connection)
}
#Usage:
# Call the insert_strike_data function
insert_strike_data(conn, bds.raw , "conditions", "flights", "wildlife", "airlines")
#####################################
# Display first 10 rows of the airports table
dbGetQuery(conn, "SELECT * FROM airports limit 10")
dbGetQuery(conn, "SELECT * FROM conditions limit 10")
dbGetQuery(conn, "SELECT * FROM  flights limit 10")
dbGetQuery(conn, "SELECT * FROM strikes  limit 10 ")
dbGetQuery(conn, "SELECT * FROM airlines ")
dbGetQuery(conn, "SELECT * FROM aircrafts")
dbGetQuery(conn, "SELECT * FROM wildlife")
query <- "
SELECT
CASE Month
WHEN '01' THEN 'January'
WHEN '02' THEN 'February'
WHEN '03' THEN 'March'
WHEN '04' THEN 'April'
WHEN '05' THEN 'May'
WHEN '06' THEN 'June'
WHEN '07' THEN 'July'
WHEN '08' THEN 'August'
WHEN '09' THEN 'September'
WHEN '10' THEN 'October'
WHEN '11' THEN 'November'
WHEN '12' THEN 'December'
ELSE 'Unknown'
END AS Month,
Num_Strikes
FROM (
SELECT
SUBSTR(SUBSTRING_INDEX(date, '-', 2), 6) AS Month,
COUNT(*) AS Num_Strikes
FROM
flights
GROUP BY
month
ORDER BY
month
) AS subquery_alias;"
result <- dbGetQuery(conn, query)
#Display the first six rows
print(result)
# Execute the SQL query to get trend data by month
trend_data <- result
# Plot the trend by month using the actual dataset
barplot(trend_data$Num_Strikes, names.arg = trend_data$Month,
ylim = c(0, max(trend_data$Num_Strikes) + 6),
main = "Trend by Month",
xlab = "Month",
ylab = "Number of Strikes",
horiz = FALSE,
col = "skyblue",
las = 2
)
# Add a grid
grid()
# Create the auditlog table
dbExecute( conn, "CREATE TABLE IF NOT EXISTS audit_log (
log_id INT AUTO_INCREMENT PRIMARY KEY,
modification_type VARCHAR(255),
table_name VARCHAR(255),
removal_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
sid INT
);")
